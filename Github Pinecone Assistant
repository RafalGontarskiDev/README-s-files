# GitHub Pinecone Assistant Documentation

## 1. Overview

The **GitHub Pinecone Assistant** plugin allows seamless integration between GitHub and Pinecone. It enables users to interact with GitHub repositories, fetch repository contents, and upload files directly to Pinecone for advanced vector-based processing. This plugin makes it easy to manage and transfer data between GitHub repositories and Pinecone's vector database.

## 2. Available Methods

### 1. **Get Repository Content List**
   - **Endpoint**: `GET https://api.github.com/repos/{{owner}}/{{repo}}/contents`
   - **What it does**: Retrieves a list of all files and directories in a GitHub repository.
   - **Configuration**:
     - Requires `owner` (the GitHub username or organization name) and `repo` (the repository name).
     - Requires a GitHub API token with `repo` scope to access private repositories.
   - **Use case**: Use this method to fetch an overview of the files and folders in a repository, helping in navigation or selection of files for further processing.

### 2. **Get Repository Content File by Path**
   - **Endpoint**: `GET https://api.github.com/repos/{{owner}}/{{repo}}/contents/{{path}}`
   - **What it does**: Retrieves the content of a specific file from a GitHub repository.
   - **Configuration**:
     - Requires `owner`, `repo`, and `path`, which is the exact path to the file within the repository.
     - Requires a GitHub API token with `repo` scope for private repositories.
   - **Use case**: This method is useful for accessing the raw content of a file, whether for downloading it locally or preparing it for further processing (e.g., uploading to Pinecone).

### 3. **Upload File to Pinecone Assistant**
   - **Endpoint**: `POST https://prod-1-data.ke.pinecone.io/assistant/files/{{ASSISTANT_NAME}}`
   - **What it does**: Uploads a file from GitHub directly into Pinecone for storage and further processing in Pinecone's vector database.
   - **Configuration**:
     - Requires `ASSISTANT_NAME`, the name of the Pinecone assistant.
     - The file fetched from GitHub must be provided in the request body.
     - Requires a valid Pinecone API key.
   - **Use case**: Store files retrieved from GitHub into Pinecone for vector analysis, processing, or future retrieval.

## 3. Configuration

To use this plugin, you need to provide **GitHub** and **Pinecone API tokens**. Here's how to configure and set up the necessary credentials.

### 1. **GitHub Personal Access Token**
   - This token is required to authenticate requests to GitHub's API.
   - To generate a token:
     - Log in to GitHub.
     - Navigate to **Settings** > **Developer Settings** > **Personal Access Tokens**.
     - Create a new token with the necessary scopes (e.g., `repo` for repository access).
     - Store the token securely and include it in the plugin configuration.

### 2. **Pinecone API Key**
   - Pinecone's API key is required to upload files into Pinecone's vector database.
   - Obtain the API key from the Pinecone dashboard after creating an assistant.
   - This key will be used in conjunction with the upload endpoint for file transfer.

### 3. **JSON Configuration Example**

```json
{
  "GitHub_token": "your_github_personal_access_token",
  "Pinecone_API_key": "your_pinecone_api_key"
}
```

This configuration allows you to authenticate with GitHub and Pinecone, enabling seamless data interaction between both platforms.

## 4. Links to Documentation

- [GitHub REST API Documentation](https://docs.github.com/en/rest)
- [GitHub Personal Access Token Guide](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)
- [Pinecone API Documentation](https://docs.pinecone.io)

This documentation will help you leverage the power of GitHub's repository management along with Pinecone's advanced vector database, allowing for efficient data handling and analysis.
