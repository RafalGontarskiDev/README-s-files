# GitLab Pinecone Assistant Documentation

## 1. Overview

The GitLab Pinecone Assistant plugin allows integration between GitLab and Pinecone. It enables users to access and manage GitLab repositories, fetch files, and seamlessly upload files to Pinecone for further data processing or analysis. This plugin combines the functionality of GitLab's project and file management with Pinecone's vector database for optimized data interaction.

## 2. Available Methods

### 1. **List Repository Tree**
   - **Endpoint**: `GET https://gitlab.com/api/v4/projects/{{projectId}}/repository/tree?recursive=true`
   - **What it does**: Retrieves the file and folder structure of a specific GitLab project.
   - **Configuration**: 
     - Requires `projectId`, the ID of the GitLab project.
     - Requires a GitLab API token with `read_repository` permissions.
   - **Use case**: Useful for fetching the entire structure of a repository when preparing to upload specific files to Pinecone.

### 2. **Fetch a File**
   - **Endpoint**: `GET https://gitlab.com/api/v4/projects/{{projectId}}/repository/files/{{filePath}}/raw`
   - **What it does**: Fetches the raw content of a file from the GitLab repository.
   - **Configuration**: 
     - Requires `projectId` and `filePath` (the path to the file within the repository).
     - Requires a GitLab API token with `read_repository` permissions.
   - **Use case**: Retrieve files from GitLab projects for further analysis or to upload to Pinecone.

### 3. **Upload File to Pinecone Assistant**
   - **Endpoint**: `POST https://prod-1-data.ke.pinecone.io/assistant/files/{{ASSISTANT_NAME}}`
   - **What it does**: Uploads a file from GitLab directly into Pinecone for vector storage and analysis.
   - **Configuration**:
     - Requires `ASSISTANT_NAME`, the name of your Pinecone assistant.
     - Requires an API key from Pinecone.
     - The file fetched from GitLab must be provided in the request body.
   - **Use case**: Store files fetched from GitLab into Pinecone for vector-based data processing or future retrieval.

## 3. Configuration

To configure and use this plugin, you will need the following:

### 1. **GitLab API Token**
   - Generate a personal access token from GitLab with the required scopes (`read_repository`).
   - To create a token:
     - Log in to GitLab.
     - Navigate to **Settings** > **Access Tokens**.
     - Create a token with the necessary scopes.
     - Store this token securely and include it in the plugin configuration.

### 2. **Pinecone API Key**
   - You will need an API key from Pinecone to upload files.
   - Refer to Pinecone's API documentation to obtain your key and configure it for the assistant.

### 3. **JSON Configuration Example**
  
```json
{
  "GitLab_token": "your_gitlab_personal_access_token",
  "Pinecone_API_key": "your_pinecone_api_key"
}
```

## 4. Links to Documentation

- [GitLab REST API Documentation](https://docs.gitlab.com/ee/api/)
- [Create GitLab Personal Access Token](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html)
- [Pinecone API Documentation](https://docs.pinecone.io)

This documentation ensures that you can fully utilize the integration of GitLab's repository and file management capabilities with Pinecone's advanced data processing tools.
